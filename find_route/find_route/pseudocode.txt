NODE CLASS:
	city
	past_distance
	previous_node
	depth
-----------------------------------------------------------------------------------------------
SEARCH
	insert origin city node into fringe
	loop until fringe empty:
		remove node from fringe font
		test if node is destination, if so return node
		if node city not in closed:
			add city to closed
			inserted into sorted fringe (by path_distance) children nodes, gotten from expand
-----------------------------------------------------------------------------------------------
EXPAND
	get list of cities from tree
	for each path
		new node
		node.distance = parent + path cost
		depth = parent + 1
		add to result
	return result

	ROUTE IS NOT RIGHT